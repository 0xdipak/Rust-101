{"future_incompat_report":[{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":14135,"byte_end":14162,"line_start":495,"line_end":495,"column_start":3,"column_end":30,"is_primary":false,"text":[{"text":"  map!(i, be_u8, |x| x as i8)","highlight_start":3,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:495:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u8, |x| x as i8)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":14276,"byte_end":14305,"line_start":501,"line_end":501,"column_start":3,"column_end":32,"is_primary":false,"text":[{"text":"  map!(i, be_u16, |x| x as i16)","highlight_start":3,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:501:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u16, |x| x as i16)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":14494,"byte_end":14598,"line_start":508,"line_end":512,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"  map!(i, be_u24, |x| if x & 0x80_00_00 != 0 {","highlight_start":3,"highlight_end":47},{"text":"    (x | 0xff_00_00_00) as i32","highlight_start":1,"highlight_end":31},{"text":"  } else {","highlight_start":1,"highlight_end":11},{"text":"    x as i32","highlight_start":1,"highlight_end":13},{"text":"  })","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:508:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u24, |x| if x & 0x80_00_00 != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (x | 0xff_00_00_00) as i32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    x as i32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":14712,"byte_end":14741,"line_start":518,"line_end":518,"column_start":3,"column_end":32,"is_primary":false,"text":[{"text":"  map!(i, be_u32, |x| x as i32)","highlight_start":3,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:518:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u32, |x| x as i32)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":14855,"byte_end":14884,"line_start":524,"line_end":524,"column_start":3,"column_end":32,"is_primary":false,"text":[{"text":"  map!(i, be_u64, |x| x as i64)","highlight_start":3,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:524:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u64, |x| x as i64)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":15021,"byte_end":15052,"line_start":531,"line_end":531,"column_start":3,"column_end":34,"is_primary":false,"text":[{"text":"  map!(i, be_u128, |x| x as i128)","highlight_start":3,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:531:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u128, |x| x as i128)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":17386,"byte_end":17413,"line_start":619,"line_end":619,"column_start":3,"column_end":30,"is_primary":false,"text":[{"text":"  map!(i, le_u8, |x| x as i8)","highlight_start":3,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:619:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m619\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u8, |x| x as i8)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":17530,"byte_end":17559,"line_start":625,"line_end":625,"column_start":3,"column_end":32,"is_primary":false,"text":[{"text":"  map!(i, le_u16, |x| x as i16)","highlight_start":3,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:625:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u16, |x| x as i16)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":17751,"byte_end":17855,"line_start":632,"line_end":636,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"  map!(i, le_u24, |x| if x & 0x80_00_00 != 0 {","highlight_start":3,"highlight_end":47},{"text":"    (x | 0xff_00_00_00) as i32","highlight_start":1,"highlight_end":31},{"text":"  } else {","highlight_start":1,"highlight_end":11},{"text":"    x as i32","highlight_start":1,"highlight_end":13},{"text":"  })","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:632:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m632\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u24, |x| if x & 0x80_00_00 != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (x | 0xff_00_00_00) as i32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m634\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    x as i32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m636\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":17972,"byte_end":18001,"line_start":642,"line_end":642,"column_start":3,"column_end":32,"is_primary":false,"text":[{"text":"  map!(i, le_u32, |x| x as i32)","highlight_start":3,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:642:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u32, |x| x as i32)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":18118,"byte_end":18147,"line_start":648,"line_end":648,"column_start":3,"column_end":32,"is_primary":false,"text":[{"text":"  map!(i, le_u64, |x| x as i64)","highlight_start":3,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:648:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u64, |x| x as i64)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22808,"byte_end":22809,"line_start":666,"line_end":666,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":18287,"byte_end":18318,"line_start":655,"line_end":655,"column_start":3,"column_end":34,"is_primary":false,"text":[{"text":"  map!(i, le_u128, |x| x as i128)","highlight_start":3,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":22321,"byte_end":22817,"line_start":649,"line_end":668,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).map(|(i,o)| {","highlight_start":1,"highlight_end":46},{"text":"        (i, _unify($g, o))","highlight_start":1,"highlight_end":27},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:666:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:655:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m655\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u128, |x| x as i128)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1212,"byte_end":1213,"line_start":46,"line_end":46,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":926,"byte_end":958,"line_start":36,"line_end":36,"column_start":7,"column_end":39,"is_primary":false,"text":[{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":7,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":29794,"byte_end":29817,"line_start":880,"line_end":880,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6822,"byte_end":6846,"line_start":193,"line_end":193,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":8404,"byte_end":8438,"line_start":255,"line_end":255,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1586,"byte_end":1609,"line_start":62,"line_end":62,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1409,"byte_end":1442,"line_start":54,"line_end":54,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":926,"byte_end":958,"line_start":36,"line_end":36,"column_start":7,"column_end":39,"is_primary":false,"text":[{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":7,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":44926,"byte_end":44949,"line_start":1407,"line_end":1407,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":23698,"byte_end":24054,"line_start":817,"line_end":831,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  recognize!(input,","highlight_start":3,"highlight_end":20},{"text":"    tuple!(","highlight_start":1,"highlight_end":12},{"text":"      opt!(alt!(char!('+') | char!('-'))),","highlight_start":1,"highlight_end":43},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        value!((), tuple!(digit, opt!(pair!(char!('.'), opt!(digit)))))","highlight_start":1,"highlight_end":72},{"text":"      | value!((), tuple!(char!('.'), digit))","highlight_start":1,"highlight_end":46},{"text":"      ),","highlight_start":1,"highlight_end":9},{"text":"      opt!(tuple!(","highlight_start":1,"highlight_end":19},{"text":"        alt!(char!('e') | char!('E')),","highlight_start":1,"highlight_end":39},{"text":"        opt!(alt!(char!('+') | char!('-'))),","highlight_start":1,"highlight_end":45},{"text":"        digit","highlight_start":1,"highlight_end":14},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"recognize!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":44708,"byte_end":45175,"line_start":1399,"line_end":1419,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,_)) => {","highlight_start":1,"highlight_end":23},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          Ok((i, ($i).slice(..index)))","highlight_start":1,"highlight_end":39},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e)    => Err(e)","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":862,"byte_end":972,"line_start":33,"line_end":39,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6183,"byte_end":8452,"line_start":169,"line_end":258,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compile_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path | $($rest:tt)*) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        Ok(o) => Ok(o),","highlight_start":1,"highlight_end":24},{"text":"        Err(Err::Error(e))      => {","highlight_start":1,"highlight_end":37},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          #[allow(dead_code)]","highlight_start":1,"highlight_end":30},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        Ok((i,o))         => Ok((i,$gen(o))),","highlight_start":1,"highlight_end":46},{"text":"        Err(Err::Error(e)) => {","highlight_start":1,"highlight_end":32},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:path => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":65},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::{Err,ErrorKind};","highlight_start":1,"highlight_end":35},{"text":"      let e2 = ErrorKind::Alt;","highlight_start":1,"highlight_end":31},{"text":"      let err = Err::Error(error_position!($i, e2));","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Err(err)","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6183,"byte_end":8452,"line_start":169,"line_end":258,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compile_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path | $($rest:tt)*) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        Ok(o) => Ok(o),","highlight_start":1,"highlight_end":24},{"text":"        Err(Err::Error(e))      => {","highlight_start":1,"highlight_end":37},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          #[allow(dead_code)]","highlight_start":1,"highlight_end":30},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        Ok((i,o))         => Ok((i,$gen(o))),","highlight_start":1,"highlight_end":46},{"text":"        Err(Err::Error(e)) => {","highlight_start":1,"highlight_end":32},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:path => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":65},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::{Err,ErrorKind};","highlight_start":1,"highlight_end":35},{"text":"      let e2 = ErrorKind::Alt;","highlight_start":1,"highlight_end":31},{"text":"      let err = Err::Error(error_position!($i, e2));","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Err(err)","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"value!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":29647,"byte_end":30108,"line_start":875,"line_end":897,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! value (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $res:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":60},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,_)) => {","highlight_start":1,"highlight_end":23},{"text":"          Ok((i, $res))","highlight_start":1,"highlight_end":24},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $res:expr, $f:expr) => (","highlight_start":1,"highlight_end":37},{"text":"    value!($i, $res, call!($f))","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $res:expr) => (","highlight_start":1,"highlight_end":28},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res: $crate::IResult<_,_> = Ok(($i, $res));","highlight_start":1,"highlight_end":54},{"text":"      res","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":862,"byte_end":972,"line_start":33,"line_end":39,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs:46:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:817:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m817\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  recognize!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m818\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m819\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      opt!(alt!(char!('+') | char!('-'))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m820\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      alt!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m830\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    )\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m831\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `recognize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":33623,"byte_end":33624,"line_start":1005,"line_end":1005,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":2099,"byte_end":2122,"line_start":80,"line_end":80,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1409,"byte_end":1442,"line_start":54,"line_end":54,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":926,"byte_end":958,"line_start":36,"line_end":36,"column_start":7,"column_end":39,"is_primary":false,"text":[{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":7,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":2556,"byte_end":2610,"line_start":97,"line_end":97,"column_start":7,"column_end":61,"is_primary":false,"text":[{"text":"      tuple!($i, $submac!($($args)*), $submac2!($($args2)*))","highlight_start":7,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":33397,"byte_end":33420,"line_start":997,"line_end":997,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":2099,"byte_end":2122,"line_start":80,"line_end":80,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1409,"byte_end":1442,"line_start":54,"line_end":54,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1157,"byte_end":1212,"line_start":46,"line_end":46,"column_start":5,"column_end":60,"is_primary":false,"text":[{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":5,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":926,"byte_end":958,"line_start":36,"line_end":36,"column_start":7,"column_end":39,"is_primary":false,"text":[{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":7,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":29794,"byte_end":29817,"line_start":880,"line_end":880,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6822,"byte_end":6846,"line_start":193,"line_end":193,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":8404,"byte_end":8438,"line_start":255,"line_end":255,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1586,"byte_end":1609,"line_start":62,"line_end":62,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1409,"byte_end":1442,"line_start":54,"line_end":54,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":926,"byte_end":958,"line_start":36,"line_end":36,"column_start":7,"column_end":39,"is_primary":false,"text":[{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":7,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":44926,"byte_end":44949,"line_start":1407,"line_end":1407,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":23698,"byte_end":24054,"line_start":817,"line_end":831,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  recognize!(input,","highlight_start":3,"highlight_end":20},{"text":"    tuple!(","highlight_start":1,"highlight_end":12},{"text":"      opt!(alt!(char!('+') | char!('-'))),","highlight_start":1,"highlight_end":43},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        value!((), tuple!(digit, opt!(pair!(char!('.'), opt!(digit)))))","highlight_start":1,"highlight_end":72},{"text":"      | value!((), tuple!(char!('.'), digit))","highlight_start":1,"highlight_end":46},{"text":"      ),","highlight_start":1,"highlight_end":9},{"text":"      opt!(tuple!(","highlight_start":1,"highlight_end":19},{"text":"        alt!(char!('e') | char!('E')),","highlight_start":1,"highlight_end":39},{"text":"        opt!(alt!(char!('+') | char!('-'))),","highlight_start":1,"highlight_end":45},{"text":"        digit","highlight_start":1,"highlight_end":14},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"recognize!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":44708,"byte_end":45175,"line_start":1399,"line_end":1419,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,_)) => {","highlight_start":1,"highlight_end":23},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          Ok((i, ($i).slice(..index)))","highlight_start":1,"highlight_end":39},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e)    => Err(e)","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":862,"byte_end":972,"line_start":33,"line_end":39,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6183,"byte_end":8452,"line_start":169,"line_end":258,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compile_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path | $($rest:tt)*) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        Ok(o) => Ok(o),","highlight_start":1,"highlight_end":24},{"text":"        Err(Err::Error(e))      => {","highlight_start":1,"highlight_end":37},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          #[allow(dead_code)]","highlight_start":1,"highlight_end":30},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        Ok((i,o))         => Ok((i,$gen(o))),","highlight_start":1,"highlight_end":46},{"text":"        Err(Err::Error(e)) => {","highlight_start":1,"highlight_end":32},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:path => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":65},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::{Err,ErrorKind};","highlight_start":1,"highlight_end":35},{"text":"      let e2 = ErrorKind::Alt;","highlight_start":1,"highlight_end":31},{"text":"      let err = Err::Error(error_position!($i, e2));","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Err(err)","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6183,"byte_end":8452,"line_start":169,"line_end":258,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compile_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path | $($rest:tt)*) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        Ok(o) => Ok(o),","highlight_start":1,"highlight_end":24},{"text":"        Err(Err::Error(e))      => {","highlight_start":1,"highlight_end":37},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          #[allow(dead_code)]","highlight_start":1,"highlight_end":30},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        Ok((i,o))         => Ok((i,$gen(o))),","highlight_start":1,"highlight_end":46},{"text":"        Err(Err::Error(e)) => {","highlight_start":1,"highlight_end":32},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:path => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":65},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::{Err,ErrorKind};","highlight_start":1,"highlight_end":35},{"text":"      let e2 = ErrorKind::Alt;","highlight_start":1,"highlight_end":31},{"text":"      let err = Err::Error(error_position!($i, e2));","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Err(err)","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"value!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":29647,"byte_end":30108,"line_start":875,"line_end":897,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! value (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $res:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":60},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,_)) => {","highlight_start":1,"highlight_end":23},{"text":"          Ok((i, $res))","highlight_start":1,"highlight_end":24},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $res:expr, $f:expr) => (","highlight_start":1,"highlight_end":37},{"text":"    value!($i, $res, call!($f))","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $res:expr) => (","highlight_start":1,"highlight_end":28},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res: $crate::IResult<_,_> = Ok(($i, $res));","highlight_start":1,"highlight_end":54},{"text":"      res","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":862,"byte_end":972,"line_start":33,"line_end":39,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":33167,"byte_end":33632,"line_start":989,"line_end":1007,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::lib::std::option::Option::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,o))          => Ok((i, Some(o))),","highlight_start":1,"highlight_end":48},{"text":"        Err(Err::Error(_)) => Ok(($i, None)),","highlight_start":1,"highlight_end":46},{"text":"        Err(e)             => Err(e),","highlight_start":1,"highlight_end":38},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"pair!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":2442,"byte_end":2924,"line_start":94,"line_end":112,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! pair(","highlight_start":1,"highlight_end":19},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple!($i, $submac!($($args)*), $submac2!($($args2)*))","highlight_start":1,"highlight_end":61},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    pair!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":47},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    pair!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":47},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    pair!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":37},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":862,"byte_end":972,"line_start":33,"line_end":39,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":33167,"byte_end":33632,"line_start":989,"line_end":1007,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::lib::std::option::Option::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,o))          => Ok((i, Some(o))),","highlight_start":1,"highlight_end":48},{"text":"        Err(Err::Error(_)) => Ok(($i, None)),","highlight_start":1,"highlight_end":46},{"text":"        Err(e)             => Err(e),","highlight_start":1,"highlight_end":38},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs:1005:24\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1005\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:817:3\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m817\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  recognize!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m818\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m819\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      opt!(alt!(char!('+') | char!('-'))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m820\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      alt!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m830\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    )\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m831\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `recognize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1828,"byte_end":1829,"line_start":69,"line_end":69,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":49,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1409,"byte_end":1442,"line_start":54,"line_end":54,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":926,"byte_end":958,"line_start":36,"line_end":36,"column_start":7,"column_end":39,"is_primary":false,"text":[{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":7,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":29794,"byte_end":29817,"line_start":880,"line_end":880,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6822,"byte_end":6846,"line_start":193,"line_end":193,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6947,"byte_end":6973,"line_start":197,"line_end":197,"column_start":21,"column_end":47,"is_primary":false,"text":[{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":21,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":8404,"byte_end":8438,"line_start":255,"line_end":255,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1586,"byte_end":1609,"line_start":62,"line_end":62,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1409,"byte_end":1442,"line_start":54,"line_end":54,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":926,"byte_end":958,"line_start":36,"line_end":36,"column_start":7,"column_end":39,"is_primary":false,"text":[{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":7,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":44926,"byte_end":44949,"line_start":1407,"line_end":1407,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":23698,"byte_end":24054,"line_start":817,"line_end":831,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  recognize!(input,","highlight_start":3,"highlight_end":20},{"text":"    tuple!(","highlight_start":1,"highlight_end":12},{"text":"      opt!(alt!(char!('+') | char!('-'))),","highlight_start":1,"highlight_end":43},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        value!((), tuple!(digit, opt!(pair!(char!('.'), opt!(digit)))))","highlight_start":1,"highlight_end":72},{"text":"      | value!((), tuple!(char!('.'), digit))","highlight_start":1,"highlight_end":46},{"text":"      ),","highlight_start":1,"highlight_end":9},{"text":"      opt!(tuple!(","highlight_start":1,"highlight_end":19},{"text":"        alt!(char!('e') | char!('E')),","highlight_start":1,"highlight_end":39},{"text":"        opt!(alt!(char!('+') | char!('-'))),","highlight_start":1,"highlight_end":45},{"text":"        digit","highlight_start":1,"highlight_end":14},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"recognize!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":44708,"byte_end":45175,"line_start":1399,"line_end":1419,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,_)) => {","highlight_start":1,"highlight_end":23},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          Ok((i, ($i).slice(..index)))","highlight_start":1,"highlight_end":39},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e)    => Err(e)","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":862,"byte_end":972,"line_start":33,"line_end":39,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6183,"byte_end":8452,"line_start":169,"line_end":258,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compile_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path | $($rest:tt)*) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        Ok(o) => Ok(o),","highlight_start":1,"highlight_end":24},{"text":"        Err(Err::Error(e))      => {","highlight_start":1,"highlight_end":37},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          #[allow(dead_code)]","highlight_start":1,"highlight_end":30},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        Ok((i,o))         => Ok((i,$gen(o))),","highlight_start":1,"highlight_end":46},{"text":"        Err(Err::Error(e)) => {","highlight_start":1,"highlight_end":32},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:path => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":65},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::{Err,ErrorKind};","highlight_start":1,"highlight_end":35},{"text":"      let e2 = ErrorKind::Alt;","highlight_start":1,"highlight_end":31},{"text":"      let err = Err::Error(error_position!($i, e2));","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Err(err)","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6183,"byte_end":8452,"line_start":169,"line_end":258,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compile_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path | $($rest:tt)*) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        Ok(o) => Ok(o),","highlight_start":1,"highlight_end":24},{"text":"        Err(Err::Error(e))      => {","highlight_start":1,"highlight_end":37},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          #[allow(dead_code)]","highlight_start":1,"highlight_end":30},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        Ok((i,o))         => Ok((i,$gen(o))),","highlight_start":1,"highlight_end":46},{"text":"        Err(Err::Error(e)) => {","highlight_start":1,"highlight_end":32},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:path => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":65},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::{Err,ErrorKind};","highlight_start":1,"highlight_end":35},{"text":"      let e2 = ErrorKind::Alt;","highlight_start":1,"highlight_end":31},{"text":"      let err = Err::Error(error_position!($i, e2));","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Err(err)","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\branch.rs","byte_start":6183,"byte_end":8452,"line_start":169,"line_end":258,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compile_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:path | $($rest:tt)*) => (","highlight_start":1,"highlight_end":48},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        Ok(o) => Ok(o),","highlight_start":1,"highlight_end":24},{"text":"        Err(Err::Error(e))      => {","highlight_start":1,"highlight_end":37},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          #[allow(dead_code)]","highlight_start":1,"highlight_end":30},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        Ok((i,o))         => Ok((i,$gen(o))),","highlight_start":1,"highlight_end":46},{"text":"        Err(Err::Error(e)) => {","highlight_start":1,"highlight_end":32},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let Err(Err::Error(ref e2)) = out {","highlight_start":1,"highlight_end":49},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:path => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":65},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::{Err,ErrorKind};","highlight_start":1,"highlight_end":35},{"text":"      let e2 = ErrorKind::Alt;","highlight_start":1,"highlight_end":31},{"text":"      let err = Err::Error(error_position!($i, e2));","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Err(err)","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"value!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":29647,"byte_end":30108,"line_start":875,"line_end":897,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! value (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $res:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":60},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,_)) => {","highlight_start":1,"highlight_end":23},{"text":"          Ok((i, $res))","highlight_start":1,"highlight_end":24},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e) => Err(e),","highlight_start":1,"highlight_end":26},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $res:expr, $f:expr) => (","highlight_start":1,"highlight_end":37},{"text":"    value!($i, $res, call!($f))","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $res:expr) => (","highlight_start":1,"highlight_end":28},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res: $crate::IResult<_,_> = Ok(($i, $res));","highlight_start":1,"highlight_end":54},{"text":"      res","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":862,"byte_end":972,"line_start":33,"line_end":39,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs:69:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:817:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m817\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  recognize!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m818\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m819\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      opt!(alt!(char!('+') | char!('-'))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m820\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      alt!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m830\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    )\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m831\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `recognize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1828,"byte_end":1829,"line_start":69,"line_end":69,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":49,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1667,"byte_end":1714,"line_start":64,"line_end":64,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1409,"byte_end":1442,"line_start":54,"line_end":54,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":926,"byte_end":958,"line_start":36,"line_end":36,"column_start":7,"column_end":39,"is_primary":false,"text":[{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":7,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":33397,"byte_end":33420,"line_start":997,"line_end":997,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":2099,"byte_end":2122,"line_start":80,"line_end":80,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1667,"byte_end":1714,"line_start":64,"line_end":64,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1409,"byte_end":1442,"line_start":54,"line_end":54,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":926,"byte_end":958,"line_start":36,"line_end":36,"column_start":7,"column_end":39,"is_primary":false,"text":[{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":7,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":44926,"byte_end":44949,"line_start":1407,"line_end":1407,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":23698,"byte_end":24054,"line_start":817,"line_end":831,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  recognize!(input,","highlight_start":3,"highlight_end":20},{"text":"    tuple!(","highlight_start":1,"highlight_end":12},{"text":"      opt!(alt!(char!('+') | char!('-'))),","highlight_start":1,"highlight_end":43},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        value!((), tuple!(digit, opt!(pair!(char!('.'), opt!(digit)))))","highlight_start":1,"highlight_end":72},{"text":"      | value!((), tuple!(char!('.'), digit))","highlight_start":1,"highlight_end":46},{"text":"      ),","highlight_start":1,"highlight_end":9},{"text":"      opt!(tuple!(","highlight_start":1,"highlight_end":19},{"text":"        alt!(char!('e') | char!('E')),","highlight_start":1,"highlight_end":39},{"text":"        opt!(alt!(char!('+') | char!('-'))),","highlight_start":1,"highlight_end":45},{"text":"        digit","highlight_start":1,"highlight_end":14},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"recognize!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":44708,"byte_end":45175,"line_start":1399,"line_end":1419,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,_)) => {","highlight_start":1,"highlight_end":23},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          Ok((i, ($i).slice(..index)))","highlight_start":1,"highlight_end":39},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        Err(e)    => Err(e)","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":862,"byte_end":972,"line_start":33,"line_end":39,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\macros.rs","byte_start":33167,"byte_end":33632,"line_start":989,"line_end":1007,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::lib::std::option::Option::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::Err;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        Ok((i,o))          => Ok((i, Some(o))),","highlight_start":1,"highlight_end":48},{"text":"        Err(Err::Error(_)) => Ok(($i, None)),","highlight_start":1,"highlight_end":46},{"text":"        Err(e)             => Err(e),","highlight_start":1,"highlight_end":38},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":862,"byte_end":972,"line_start":33,"line_end":39,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, (), $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs","byte_start":1066,"byte_end":2295,"line_start":44,"line_end":88,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path, $($rest:tt)*) => (","highlight_start":1,"highlight_end":59},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, (o), $($rest)*)","highlight_start":1,"highlight_end":42},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ( $submac!(i_, $($args)*) ).and_then(|(i,o)| {","highlight_start":1,"highlight_end":53},{"text":"        let i_ = i.clone();","highlight_start":1,"highlight_end":28},{"text":"        tuple_parser!(i_, ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":56},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:tt),*), $e:path) => (","highlight_start":1,"highlight_end":45},{"text":"    tuple_parser!($i, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":50},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":53},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, (o)))","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      ( $submac!(i_, $($args)*) ).map(|(i,o)| (i, ($($parsed),* , o)))","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":38},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::lib::std::result::Result::Ok(($i, ($($parsed),*)))","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\sequence.rs:69:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:817:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m817\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  recognize!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m818\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m819\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      opt!(alt!(char!('+') | char!('-'))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m820\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      alt!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m830\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    )\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m831\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `recognize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs","byte_start":5916,"byte_end":5917,"line_start":184,"line_end":184,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"    flat_map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":24523,"byte_end":24572,"line_start":846,"line_end":846,"column_start":3,"column_end":52,"is_primary":false,"text":[{"text":"  flat_map!(input, recognize_float, parse_to!(f32))","highlight_start":3,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs","byte_start":5500,"byte_end":6396,"line_start":176,"line_end":202,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":70},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":58},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":58},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":48},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::{Convert,Err};","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).and_then(|(i,o)| {","highlight_start":1,"highlight_end":51},{"text":"        match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":41},{"text":"          Err(e)      => Err(Err::convert(e)),","highlight_start":1,"highlight_end":47},{"text":"          Ok((_, o2)) => Ok((i, o2))","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs:184:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    flat_map!(__impl $i, call!($f), $submac!($($args)*));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:846:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m846\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input, recognize_float, parse_to!(f32))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs","byte_start":5674,"byte_end":5675,"line_start":178,"line_end":178,"column_start":69,"column_end":70,"is_primary":true,"text":[{"text":"    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":69,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":25052,"byte_end":25108,"line_start":861,"line_end":861,"column_start":3,"column_end":59,"is_primary":false,"text":[{"text":"  flat_map!(input, call!(recognize_float), parse_to!(f32))","highlight_start":3,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs","byte_start":5500,"byte_end":6396,"line_start":176,"line_end":202,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":70},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":58},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":58},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":48},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::{Convert,Err};","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).and_then(|(i,o)| {","highlight_start":1,"highlight_end":51},{"text":"        match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":41},{"text":"          Err(e)      => Err(Err::convert(e)),","highlight_start":1,"highlight_end":47},{"text":"          Ok((_, o2)) => Ok((i, o2))","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs:178:69\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:861:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m861\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input, call!(recognize_float), parse_to!(f32))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs","byte_start":5674,"byte_end":5675,"line_start":178,"line_end":178,"column_start":69,"column_end":70,"is_primary":true,"text":[{"text":"    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":69,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":25524,"byte_end":25580,"line_start":875,"line_end":875,"column_start":3,"column_end":59,"is_primary":false,"text":[{"text":"  flat_map!(input, call!(recognize_float), parse_to!(f64))","highlight_start":3,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs","byte_start":5500,"byte_end":6396,"line_start":176,"line_end":202,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":70},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":58},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":58},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":48},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::{Convert,Err};","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).and_then(|(i,o)| {","highlight_start":1,"highlight_end":51},{"text":"        match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":41},{"text":"          Err(e)      => Err(Err::convert(e)),","highlight_start":1,"highlight_end":47},{"text":"          Ok((_, o2)) => Ok((i, o2))","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs:178:69\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:875:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m875\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input, call!(recognize_float), parse_to!(f64))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs","byte_start":5674,"byte_end":5675,"line_start":178,"line_end":178,"column_start":69,"column_end":70,"is_primary":true,"text":[{"text":"    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":69,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs","byte_start":26062,"byte_end":26118,"line_start":890,"line_end":890,"column_start":3,"column_end":59,"is_primary":false,"text":[{"text":"  flat_map!(input, call!(recognize_float), parse_to!(f64))","highlight_start":3,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs","byte_start":5500,"byte_end":6396,"line_start":176,"line_end":202,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":70},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":58},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":58},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":48},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::lib::std::result::Result::*;","highlight_start":1,"highlight_end":47},{"text":"      use $crate::{Convert,Err};","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      ($submac!($i, $($args)*)).and_then(|(i,o)| {","highlight_start":1,"highlight_end":51},{"text":"        match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":41},{"text":"          Err(e)      => Err(Err::convert(e)),","highlight_start":1,"highlight_end":47},{"text":"          Ok((_, o2)) => Ok((i, o2))","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      })","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\simple_errors.rs:178:69\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    flat_map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nom-4.2.3\\src\\nom.rs:890:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m890\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input, call!(recognize_float), parse_to!(f64))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `flat_map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
