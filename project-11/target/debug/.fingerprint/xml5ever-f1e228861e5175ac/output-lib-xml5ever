{"future_incompat_report":[{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":23976,"byte_end":23993,"line_start":659,"line_end":659,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m659\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16491,"byte_end":16492,"line_start":520,"line_end":520,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":23976,"byte_end":23993,"line_start":659,"line_end":659,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:520:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m659\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":25395,"byte_end":25417,"line_start":691,"line_end":691,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_tag cl),","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_tag cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16736,"byte_end":16737,"line_start":522,"line_end":522,"column_start":93,"column_end":94,"is_primary":true,"text":[{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":93,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":25395,"byte_end":25417,"line_start":691,"line_end":691,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_tag cl),","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:522:93\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_tag cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":26361,"byte_end":26389,"line_start":714,"line_end":714,"column_start":27,"column_end":55,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_target cl),","highlight_start":27,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_target cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19245,"byte_end":19246,"line_start":544,"line_end":544,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":26361,"byte_end":26389,"line_start":714,"line_end":714,"column_start":27,"column_end":55,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_target cl),","highlight_start":27,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:544:94\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_target cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":26881,"byte_end":26907,"line_start":728,"line_end":728,"column_start":27,"column_end":53,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_data cl),","highlight_start":27,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m728\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_data cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19357,"byte_end":19358,"line_start":545,"line_end":545,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":26881,"byte_end":26907,"line_start":728,"line_end":728,"column_start":27,"column_end":53,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_data cl),","highlight_start":27,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:545:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m728\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_data cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":27189,"byte_end":27215,"line_start":736,"line_end":736,"column_start":27,"column_end":53,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_data cl),","highlight_start":27,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_data cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19357,"byte_end":19358,"line_start":545,"line_end":545,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":27189,"byte_end":27215,"line_start":736,"line_end":736,"column_start":27,"column_end":53,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_data cl),","highlight_start":27,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:545:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_data cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":28797,"byte_end":28822,"line_start":773,"line_end":773,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m773\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17875,"byte_end":17876,"line_start":532,"line_end":532,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":28797,"byte_end":28822,"line_start":773,"line_end":773,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:532:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m773\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":29104,"byte_end":29131,"line_start":780,"line_end":780,"column_start":28,"column_end":55,"is_primary":false,"text":[{"text":"                    '<' => go!(self: push_comment '<'),","highlight_start":28,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m780\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '<' => go!(self: push_comment '<'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17875,"byte_end":17876,"line_start":532,"line_end":532,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":29104,"byte_end":29131,"line_start":780,"line_end":780,"column_start":28,"column_end":55,"is_primary":false,"text":[{"text":"                    '<' => go!(self: push_comment '<'),","highlight_start":28,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:532:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m780\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '<' => go!(self: push_comment '<'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":30738,"byte_end":30765,"line_start":817,"line_end":817,"column_start":28,"column_end":55,"is_primary":false,"text":[{"text":"                    '-' => go!(self: push_comment '-'),","highlight_start":28,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m817\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '-' => go!(self: push_comment '-'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17875,"byte_end":17876,"line_start":532,"line_end":532,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":30738,"byte_end":30765,"line_start":817,"line_end":817,"column_start":28,"column_end":55,"is_primary":false,"text":[{"text":"                    '-' => go!(self: push_comment '-'),","highlight_start":28,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:532:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m817\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '-' => go!(self: push_comment '-'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":31482,"byte_end":31507,"line_start":833,"line_end":833,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17875,"byte_end":17876,"line_start":532,"line_end":532,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":31482,"byte_end":31507,"line_start":833,"line_end":833,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:532:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":31737,"byte_end":31755,"line_start":840,"line_end":840,"column_start":27,"column_end":45,"is_primary":false,"text":[{"text":"                    cl => go!(self: emit cl),","highlight_start":27,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m840\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: emit cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16491,"byte_end":16492,"line_start":520,"line_end":520,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":31737,"byte_end":31755,"line_start":840,"line_end":840,"column_start":27,"column_end":45,"is_primary":false,"text":[{"text":"                    cl => go!(self: emit cl),","highlight_start":27,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:520:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m840\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: emit cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":32264,"byte_end":32283,"line_start":854,"line_end":854,"column_start":28,"column_end":47,"is_primary":false,"text":[{"text":"                    ']' => go!(self: emit ']'),","highlight_start":28,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m854\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ']' => go!(self: emit ']'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16491,"byte_end":16492,"line_start":520,"line_end":520,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":32264,"byte_end":32283,"line_start":854,"line_end":854,"column_start":28,"column_end":47,"is_primary":false,"text":[{"text":"                    ']' => go!(self: emit ']'),","highlight_start":28,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:520:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m854\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ']' => go!(self: emit ']'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":32732,"byte_end":32754,"line_start":864,"line_end":864,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_tag cl),","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m864\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_tag cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16736,"byte_end":16737,"line_start":522,"line_end":522,"column_start":93,"column_end":94,"is_primary":true,"text":[{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":93,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":32732,"byte_end":32754,"line_start":864,"line_end":864,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_tag cl),","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:522:93\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m864\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_tag cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":33405,"byte_end":33421,"line_start":880,"line_end":880,"column_start":28,"column_end":44,"is_primary":false,"text":[{"text":"                    ':' => go!(self: error),","highlight_start":28,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m880\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ':' => go!(self: error),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":18888,"byte_end":18889,"line_start":541,"line_end":541,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":33405,"byte_end":33421,"line_start":880,"line_end":880,"column_start":28,"column_end":44,"is_primary":false,"text":[{"text":"                    ':' => go!(self: error),","highlight_start":28,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:541:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m880\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ':' => go!(self: error),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":33937,"byte_end":33960,"line_start":891,"line_end":891,"column_start":27,"column_end":50,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_name cl),","highlight_start":27,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m891\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_name cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17535,"byte_end":17536,"line_start":529,"line_end":529,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":33937,"byte_end":33960,"line_start":891,"line_end":891,"column_start":27,"column_end":50,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_name cl),","highlight_start":27,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:529:94\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m891\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_name cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":35407,"byte_end":35430,"line_start":920,"line_end":920,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17650,"byte_end":17651,"line_start":530,"line_end":530,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":35407,"byte_end":35430,"line_start":920,"line_end":920,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:530:95\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":35473,"byte_end":35498,"line_start":921,"line_end":921,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m921\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17767,"byte_end":17768,"line_start":531,"line_end":531,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":35473,"byte_end":35498,"line_start":921,"line_end":921,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:531:98\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m921\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":35909,"byte_end":35932,"line_start":929,"line_end":929,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17650,"byte_end":17651,"line_start":530,"line_end":530,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":35909,"byte_end":35932,"line_start":929,"line_end":929,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:530:95\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":35975,"byte_end":36000,"line_start":930,"line_end":930,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m930\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17767,"byte_end":17768,"line_start":531,"line_end":531,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":35975,"byte_end":36000,"line_start":930,"line_end":930,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:531:98\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m930\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":36503,"byte_end":36526,"line_start":939,"line_end":939,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m939\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17650,"byte_end":17651,"line_start":530,"line_end":530,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":36503,"byte_end":36526,"line_start":939,"line_end":939,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:530:95\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m939\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":36569,"byte_end":36594,"line_start":940,"line_end":940,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m940\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17767,"byte_end":17768,"line_start":531,"line_end":531,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":36569,"byte_end":36594,"line_start":940,"line_end":940,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:531:98\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m940\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":40925,"byte_end":40958,"line_start":1026,"line_end":1026,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1026\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":18561,"byte_end":18562,"line_start":538,"line_end":538,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":40925,"byte_end":40958,"line_start":1026,"line_end":1026,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:538:94\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m538\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1026\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":41381,"byte_end":41414,"line_start":1034,"line_end":1034,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1034\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":18561,"byte_end":18562,"line_start":538,"line_end":538,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":41381,"byte_end":41414,"line_start":1034,"line_end":1034,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:538:94\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m538\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1034\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":48061,"byte_end":48078,"line_start":1198,"line_end":1198,"column_start":49,"column_end":66,"is_primary":false,"text":[{"text":"                states::Data | states::Cdata => go!(self: emit c),","highlight_start":49,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::Data | states::Cdata => go!(self: emit c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16491,"byte_end":16492,"line_start":520,"line_end":520,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":48061,"byte_end":48078,"line_start":1198,"line_end":1198,"column_start":49,"column_end":66,"is_primary":false,"text":[{"text":"                states::Data | states::Cdata => go!(self: emit c),","highlight_start":49,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:520:76\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m520\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::Data | states::Cdata => go!(self: emit c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22537,"byte_end":22538,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":48124,"byte_end":48147,"line_start":1200,"line_end":1200,"column_start":44,"column_end":67,"is_primary":false,"text":[{"text":"                states::TagAttrValue(_) => go!(self: push_value c),","highlight_start":44,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:618:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m618\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::TagAttrValue(_) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":17650,"byte_end":17651,"line_start":530,"line_end":530,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19867,"byte_end":19893,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":22513,"byte_end":22537,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":48124,"byte_end":48147,"line_start":1200,"line_end":1200,"column_start":44,"column_end":67,"is_primary":false,"text":[{"text":"                states::TagAttrValue(_) => go!(self: push_value c),","highlight_start":44,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19950,"byte_end":22593,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":19809,"byte_end":19898,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"C:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs","byte_start":16391,"byte_end":19496,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\dipak\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\xml5ever-0.16.2\\src\\tokenizer\\mod.rs:530:95\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m530\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::TagAttrValue(_) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
